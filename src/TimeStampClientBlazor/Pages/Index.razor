@page "/"
@using System.IO
@using System.Text
@inject IJSRuntime JSRuntime

<h1>TimeStampClientBlazor</h1>

<h3>Upload Files</h3>

<p>
    <label>
        Upload file up to @maxFileSize bytes:
        <InputFile OnChange="@LoadFiles" />
    </label>
</p>

<p>@exceptionMessage</p>

@if (isLoading)
{
    <p>Loading...</p>
}

<ul>
    @foreach (var (file, content) in loadedFiles)
    {
        <li>
            <ul>
                <li>Name: @file.Name</li>
                <li>Last modified: @file.LastModified.ToString()</li>
                <li>Size (bytes): @file.Size</li>
                <li>Content type: @file.ContentType</li>
                <li>Content: @content</li>
            </ul>
        </li>
    }
</ul>

@code {
    private Dictionary<IBrowserFile, string> loadedFiles =
        new Dictionary<IBrowserFile, string>();
    private long maxFileSize = 1024 * 1000;
    private bool isLoading;
    string exceptionMessage;

    async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        exceptionMessage = string.Empty;

        try
        {
            using var reader =
                new StreamReader(e.File.OpenReadStream(maxFileSize));

            loadedFiles.Add(e.File, await reader.ReadToEndAsync());
        }
        catch (Exception ex)
        {
            exceptionMessage = ex.Message;
        }

        isLoading = false;

        Stream stream = e.File.OpenReadStream();

        byte[] buffer = new byte[16 * 1024];
        MemoryStream ms = new MemoryStream();

        int read;
        while ((read = await stream.ReadAsync(buffer, 0, buffer.Length)) > 0)
        {
            ms.Write(buffer, 0, read);
        }

        var timeStampToken = await Disig.TimeStampClient.TimeStampClient.RequestTimeStampTokenUpdatedAsync("https://localhost:5001/tsr", ms);

        await DownloadText(timeStampToken);
    }

    async Task DownloadBinary()
    {
        // Generate a file
        byte[] file = Enumerable.Range(0, 100).Cast<byte>().ToArray();

        // Send the data to JS to actually download the file
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "file.bin", "application/octet-stream", file);
    }

    async Task DownloadText(Disig.TimeStampClient.TimeStampToken fileInput)
    {
        // Generate a text file
        //byte[] file = System.Text.Encoding.UTF8.GetBytes("Hello world!");
        byte[] file = fileInput.ToByteArray();
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "file.asice", @"application/vnd.etsi.asic - e + zip", file);
        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", "file.txt", "text/plain", file);
    }
}
